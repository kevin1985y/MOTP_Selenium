#coding=utf-8
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import NoSuchElementException
from selenium.common.exceptions import NoAlertPresentException
import unittest, time, re
import xmlrunner
from time import sleep

class Login(unittest.TestCase):
    def setUp(self):

        self.driver =webdriver.Chrome("chromedriver.exe")
        self.driver.implicitly_wait(30)
        self.base_url = "http://192.168.1.130:8080/"
        self.verificationErrors = []
        self.accept_next_alert = True

    def test1_Login_Succeed(self):
        try:            
            driver = self.driver
            driver.get(self.base_url + "/MOTPWeb")
            driver.find_element_by_id("user").clear()
            driver.find_element_by_id("user").send_keys("admin")
            driver.find_element_by_id("mypass").clear()
            driver.find_element_by_id("mypass").send_keys("admin")
            driver.find_element_by_id("mypass").submit()
            print("Login Success.")
            assert True
        except Exception as e:
            print("Login failure.")
            assert False
        
    def test2_Login_WrongPassword(self):
		driver = self.driver
		driver.get(self.base_url + "/MOTPWeb")
		driver.find_element_by_id("user").clear()
		driver.find_element_by_id("user").send_keys("admin")
		driver.find_element_by_id("mypass").clear()
		driver.find_element_by_id("mypass").send_keys("321321")
		driver.find_element_by_id("mypass").submit()
		output = driver.find_element_by_class_name("indexError").text
		self.assertEqual(output, 'Login fail')
		print("Login fail.")
        

    def test3_Login_EmptyAccount(self):        
		driver = self.driver
		driver.get(self.base_url + "/MOTPWeb")
		driver.find_element_by_id("mypass").submit()
		alert = driver.switch_to.alert
		output = alert.text
		alert.accept()
		self.assertEqual(output, "[Account] Please fill the fields.")
		print("[Account] Please fill the fields.")
            
    def test4_Login_EmptyPassword(self):          
        driver = self.driver
		driver.get(self.base_url + "/MOTPWeb")
		driver.find_element_by_id("user").clear()
		driver.find_element_by_id("user").send_keys("admin")
		driver.find_element_by_id("mypass").submit()
		alert = driver.switch_to.alert
		output = alert.text
		alert.accept()
		self.assertEqual(output, "[Password] Please fill the fields.")
		print("[Password] Please fill the fields.")
			
	def test5_Login_SpecialAccount(self):          
        driver = self.driver
		driver.get(self.base_url + "/MOTPWeb")
        driver.find_element_by_id("user").clear()
        driver.find_element_by_id("user").send_keys("~!@#")
        driver.find_element_by_id("mypass").submit()
        alert = driver.switch_to.alert
        output = alert.text
        alert.accept()
        self.assertEqual(output, "[Account] Correct character: 0~9, a~z, A~Z, ._-")
        print("[Account] Correct character: 0~9, a~z, A~Z, ._-")

	def test6_Login_SpecialPassword(self):
        driver = self.driver
        driver.get(self.base_url + "/MOTPWeb")
        driver.find_element_by_id("user").clear()
        driver.find_element_by_id("user").send_keys("admin")
        driver.find_element_by_id("mypass").clear()
        driver.find_element_by_id("mypass").send_keys("~!@# ~!@")
        driver.find_element_by_id("mypass").submit()
        output = driver.find_element_by_class_name("indexError").text
        self.assertEqual(output, 'Login fail.')
        print("Login fail.")
		
	def test7_Login_NotExistAccount(self):
		driver = self.driver
		driver.get(self.base_url + "/MOTPWeb")
		driver.find_element_by_id("user").clear()
		driver.find_element_by_id("user").send_keys("cgadmin")
		driver.find_element_by_id("mypass").clear()
		driver.find_element_by_id("mypass").send_keys("123123")
		driver.find_element_by_id("mypass").submit()
		output = driver.find_element_by_class_name("indexError").text
		self.assertEqual(output, 'Login fail.')
		print("Login fail.")	
		
		
		
		
		
		
			
    def is_element_present(self, how, what):
        try: self.driver.find_element(by=how, value=what)
        except NoSuchElementException as e: return False
        return True
    
    def is_alert_present(self):
        try: self.driver.switch_to_alert()
        except NoAlertPresentException as e: return False
        return True
    
    def close_alert_and_get_its_text(self):
        try:
            alert = self.driver.switch_to_alert()
            alert_text = alert.text
            if self.accept_next_alert:
                alert.accept()
            else:
                alert.dismiss()
            return alert_text
        finally: self.accept_next_alert = True

if __name__ == '__main__':
    unittest.main(testRunner=xmlrunner.XMLTestRunner(output='test-reports'))
